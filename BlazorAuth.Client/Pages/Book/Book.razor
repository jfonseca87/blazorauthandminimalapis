@page "/createbook"
@attribute [Authorize]

@inject IBookDataService bookDataSrv
@inject NavigationManager navManager

<h3> New Book</h3>

@if (!string.IsNullOrEmpty(errors))
{
    <div style="color: red;">
        Errors:
        <p>@errors</p>
    </div>
}

<EditForm Model="@newBook" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newBook.Title" />
        <ValidationMessage For="@(() => newBook.Title)" />
    </div>

    <div class="form-group">
        <label for="author">Author</label>
        <InputText id="author" class="form-control" @bind-Value="newBook.Author" />
        <ValidationMessage For="@(() => newBook.Author)" />
    </div>

    <div class="form-group">
        <label for="pages">Pages</label>
        <InputNumber id="pages" class="form-control" @bind-Value="newBook.Pages" />
        <ValidationMessage For="@(() => newBook.Pages)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Book</button>
</EditForm>

@code {
    private BlazorAuth.Shared.Models.Book newBook = new BlazorAuth.Shared.Models.Book();
    string errors = string.Empty;

    private async Task HandleValidSubmit()
    {
        var response = await bookDataSrv.AddBook(newBook);
        if (response.Success)
        {
            navManager.NavigateTo("/books");
        }
        else
        {
            errors = string.Join(", ", response.Errors);
            StateHasChanged();
        }
    }
}
